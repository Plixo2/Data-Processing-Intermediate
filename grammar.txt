toplvl := "static" staticBlock | "struct" structBlock

staticBlock := idDef "{" staticList "}"
structBlock := idDef "{" definitionsList "}"


staticList := staticFunction staticList | staticFunction "}"
staticFunction := functionDef statement

statement := blockStatement | flowStatement | normalStatement
blockStatement := "{" blockStatementList
blockStatementList := statement "}" | statement blockStatementList

flowStatement := "if" _if | "for" _for
normalStatement := varAssignment | varDefinition | varCall

_if :=  expression statement | expression statement "else" statement
_for := statement expression statement statement


definitionsList := definitions "}" | definitions definitionsList
definitions := varDefinitionShort | functionDefShort

varDefinitionShort := typeDef idDef
varDefinition := typeDef idDef "=" expression
varAssignment := varTerminal "=" expression
varCall := member "(" argList ")"


outDefinitions := typeDef

inputDefinitionsShort := "(" inputDefs ")"
inputDefsShort := typeDef "," inputDefsShort | typeDef idDef
functionDefShort := "fn" idDef inputDefinitionsShort "->" outDefinitions

inputDefinitions := "(" inputDefs ")"
inputDefs := typeDef idDef "," inputDefs | typeDef idDef

functionDef := "fn" idDef inputDefinitions "->" outDefinitions


typeDef := "keyword" "[" "]" | "keyword"
idDef := "keyword"

argList := 	expression "," argList | expression

member := varTerminal | varTerminal member
varTerminal := "." "keyword" | "(" argList ")" | "[" expression "]"

arrayInitializer := "[" argList "]"

expression := functionDef | boolArithmetic

factor := "(" expression ")" |
			"-" factor |
			"+" factor |
			"!" factor
			number |
			"false"  |
			"true" |
			arrayInitializer |
			member
number := "number"

boolArithmetic := comparisonArithmetic "&&" boolArithmetic | comparisonArithmetic
comparisonArithmetic := arithmetic "<=" comparisonArithmetic | arithmetic
arithmetic := term "+" arithmetic | term
term := factor "*" term | factor


